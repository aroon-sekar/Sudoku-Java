#BlueJ class context
comment0.target=SudokuGUI
comment0.text=\r\n\ SudokuGUI\r\n\ This\ class\ is\ the\ GUI\ for\ the\ Sudoku\ game.\ It\ contains\ the\ main\ method\ and\ the\ GUI\ elements.\r\n\ The\ class\ extends\ JPanel\ and\ implements\ Observer\ to\ observe\ changes\ in\ the\ game.\r\n\r\n\ @author\ Arun\ Kumar\ Sekar\r\n\r\n\ @version\ January\ 2024\r\n
comment1.params=
comment1.target=SudokuGUI()
comment1.text=\r\n\ \r\n\ SudokuGUI\r\n\ This\ is\ the\ constructor\ for\ the\ SudokuGUI\ class.\r\n\ Initializes\ the\ Sudoku\ game\ model\ and\ sets\ up\ the\ graphical\ user\ interface\ components.\r\n\ This\ includes\ creating\ the\ game\ grid,\ setting\ up\ control\ buttons\ (Save,\ Load,\ Clear,\ Undo,\ Redo,\ Help,\ Quit),\r\n\ It\ also\ sets\ up\ the\ stacks\ for\ undo\ and\ redo.Constructor\ for\ the\ SudokuGUI\ class.\r\n\ \ \ \ \r\n
comment10.params=
comment10.target=void\ moveCountLabel()
comment10.text=\r\n\ moveCountLabel\r\n\ Updates\ the\ label\ that\ displays\ the\ current\ move\ count.\r\n
comment11.params=
comment11.target=void\ initializeDifficulty()
comment11.text=\r\n\ initializeDifficulty\ \r\n\ Initializes\ the\ select\ difficulty\ frame\ of\ the\ Sudoku\ game.\r\n\ This\ method\ sets\ the\ difficulty\ and\ updates\ the\ label\ displaying\ the\ remaining\ moves.\r\n
comment12.params=row\ col
comment12.target=void\ latestCellValue(int,\ int)
comment12.text=\r\n\ latestCellValue\r\n\ Updates\ the\ value\ of\ the\ the\ specific\ cell\r\n\ Sets\ the\ text\ to\ the\ current\ value\r\n\ Also\ checks\ if\ the\ cell\ is\ fillable\ or\ not\r\n\ \r\n\ @param\ row\ The\ row\ number\ of\ the\ cell\r\n\ @param\ col\ The\ column\ number\ of\ the\ cell\r\n\ \r\n
comment13.params=
comment13.target=void\ cellGraphics()
comment13.text=\r\n\ \r\n\ cellGraphics\ \r\n\ This\ method\ defines\ graphical\ properties\ of\ all\ cells\ in\ the\ Sudoku\ grid.\r\n\ This\ includes\ the\ background\ color,\ text\ color,\ font,\ and\ border.\r\n\ \r\n
comment14.params=
comment14.target=void\ replayGame()
comment14.text=\r\n\ \r\n\ replayGame\r\n\ Asks\ the\ user\ to\ play\ another\ game\ upon\ successfully\ solving\ the\ puzzle.\r\n\ If\ the\ user\ chooses\ to\ play\ again,\ the\ game\ state\ is\ reset.\ Otherwise,\ the\ application\ exits.\r\n\r\n
comment15.params=
comment15.target=void\ displayGame()
comment15.text=\r\n\ \r\n\ displayGame\r\n\ Updates\ the\ display\ of\ the\ entire\ game\ grid\ based\ on\ the\ current\ state\ of\ the\ game.\r\n\ Each\ cell's\ text\ is\ set\ to\ display\ the\ value\ of\ the\ corresponding\ cell\ in\ the\ game\ model.\r\n\ Once\ the\ grid\ is\ updated,\ the\ method\ checks\ if\ the\ game\ has\ been\ won.\ If\ so,\ it\ disables\ all\ cells.\r\n\ \r\n\r\n
comment16.params=row\ col
comment16.target=void\ cellSelect(int,\ int)
comment16.text=\r\n\ CellSelect\r\n\ Handles\ user\ interaction\ when\ a\ cell\ is\ selected\ in\ the\ Sudoku\ grid.\r\n\ If\ a\ cell\ is\ fillable,\ it\ prompts\ the\ user\ to\ enter\ a\ number\ for\ the\ cell.\r\n\ Validates\ the\ input\ to\ ensure\ it's\ a\ valid\ number\ for\ the\ specific\ Sudoku\ grid[9x9\ or\ 4x4].\r\n\ \r\n\ Also\ checks\ against\ the\ difficulty\ settings\ to\ limit\ the\ moves\r\n\r\n\ @param\ row\ The\ row\ number\ of\ the\ clicked\ cell.\r\n\ @param\ col\ The\ column\ number\ of\ the\ clicked\ cell.\r\n\r\n
comment17.params=row\ col\ number
comment17.target=boolean\ isNumberInRowOrColumn(int,\ int,\ java.lang.String)
comment17.text=\r\n\ Checks\ if\ a\ given\ number\ exists\ in\ the\ same\ row\ or\ column\ as\ the\ specified\ cell.\r\n\ \r\n\ @param\ row\ \ \ \ The\ row\ of\ the\ cell\ being\ checked.\r\n\ @param\ col\ \ \ \ The\ column\ of\ the\ cell\ being\ checked.\r\n\ @param\ number\ The\ number\ to\ check\ for\ in\ the\ same\ row\ or\ column.\r\n\r\n\ @return\ true\ if\ the\ number\ exists\ in\ the\ same\ row\ or\ column,\ false\ otherwise.\r\n
comment18.params=
comment18.target=void\ saveGame()
comment18.text=\r\n\ Saves\ the\ current\ game\ state\ to\ a\ file\ using\ the\ FileDriver\ class.\r\n
comment19.params=
comment19.target=void\ loadGame()
comment19.text=\r\n\ loads\ the\ saved\ game\ state\ from\ a\ file\ using\ the\ FileDriver\ class.\r\n
comment2.params=ae
comment2.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment20.params=
comment20.target=void\ clearGame()
comment20.text=\r\n\ clearGame\r\n\ This\ method\ resets\ the\ current\ game\ to\ a\ new\ game\r\n\ It\ resets\ all\ the\ stacks\ \r\n\ Also\ the\ UI\ and\ move\ counts\ are\ updated\ to\ a\ new\ game\r\n\ \ \r\n
comment21.params=
comment21.target=void\ undoMove()
comment21.text=\r\n\ undoMove\r\n\ This\ method\ performs\ the\ undo\ move\ resulting\ in\ the\ poping\ the\ last-in\ value\ in\ the\ ustack\r\n\ It\ will\ also\ push\ the\ move\ back\ onto\ the\ redo\ stack\ in\ case\ the\ user\ wants\ to\ redo\ the\ move\ again\r\n\ If\ there\ are\ no\ moves(empty\ stack),\ the\ method\ prints\ out\ "No\ moves\ to\ undo"\r\n\ Updates\ the\ move\ count,\ the\ move\ history\ area\ and\ the\ status\ area\r\n\ \r\n
comment22.params=
comment22.target=void\ redoMove()
comment22.text=\r\n\ \r\n\ This\ method\ implement\ redoMove\ to\ pop\ from\ value\ from\ the\ rStack\ if\ there\ are\ any\ and\ make\ the\ move\ again\r\n\ It\ will\ also\ push\ the\ move\ back\ onto\ the\ undo\ stack\ in\ case\ the\ user\ wants\ to\ undo\ the\ move\ again\r\n\ If\ there\ are\ no\ moves(empty\ stack),\ the\ method\ prints\ out\ "No\ moves\ to\ redo"\r\n\ Updates\ the\ move\ count,\ the\ move\ history\ area\ and\ the\ status\ area\r\n\ \r\n
comment23.params=move
comment23.target=void\ updateMoveHistory(java.lang.String)
comment23.text=\r\n\ updateMoveHistory\r\n\ This\ method\ updates\ the\ move\ history\ area\ with\ the\ latest\ move\r\n\ \r\n\ @param\ move\r\n
comment24.params=row\ col
comment24.target=boolean\ isCellFillable(int,\ int)
comment24.text=\r\n\ isCellFillable\r\n\ This\ method\ checks\ if\ the\ cell\ is\ fillable\ or\ not\r\n\ \r\n\ @param\ row\r\n\ @param\ col\r\n\ @return\ boolean\ true\ is\ the\ cell\ is\ fillable,\ false\ otherwise\r\n
comment25.params=
comment25.target=void\ selectDifficulty()
comment25.text=\r\n\ selectDifficulty\r\n\ This\ method\ displays\ the\ difficulty\ selection\ frame\r\n\ It\ sets\ the\ difficulty\ based\ on\ the\ user\ selection\ [EASY,\ HARD]\r\n\ Uses\ the\ difficulty\ manager\ class\ to\ set\ the\ moves\ based\ on\ the\ difficulty\r\n\ calls\ the\ updateRemainingMovesLabel()\ to\ update\ the\ remaining\ moves\ label\r\n
comment26.params=
comment26.target=void\ updateRemainingMovesLabel()
comment26.text=\r\n\ updateRemainingMovesLabel\r\n\ This\ method\ updates\ the\ remaining\ moves\ label\ based\ on\ the\ difficulty\r\n\ If\ the\ difficulty\ is\ hard,\ it\ will\ display\ the\ remaining\ moves\r\n\ If\ the\ difficulty\ is\ easy,\ it\ will\ display\ unlimited\ moves\r\n
comment27.params=o\ arg
comment27.target=void\ update(java.util.Observable,\ java.lang.Object)
comment27.text=\r\n\ Called\ whenever\ an\ observed\ object\ is\ changed.\ This\ method\ is\ part\ of\ the\ Observer\ implementation.\r\n\ It\ updates\ the\ value\ displayed\ in\ a\ cell\ if\ the\ corresponding\ Observable\ object\ (a\ move)\ has\ changed.\r\n\ \r\n\ @param\ o\ The\ observable\ object.\r\n\ @param\ arg\ An\ argument\ passed\ to\ the\ notifyObservers\ method\ (not\ used\ here).\r\n
comment28.params=args
comment28.target=void\ main(java.lang.String[])
comment28.text=\r\n\ main\ method\r\n\ This\ is\ the\ main\ method\ of\ the\ SudokuGUI\ class\r\n\ It\ creates\ a\ new\ JFrame\ and\ adds\ the\ SudokuGUI\ to\ the\ frame\r\n\ \r\n
comment3.params=ae
comment3.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment4.params=ae
comment4.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment5.params=ae
comment5.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment6.params=ae
comment6.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment7.params=ae
comment7.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment8.params=ae
comment8.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment9.params=row\ col
comment9.target=javax.swing.JButton\ createCellButton(int,\ int)
comment9.text=\r\n\ createCellButton\r\n\ This\ method\ creates\ a\ new\ cell\ for\ the\ Sudoku\ grid.\r\n\ \r\n\ @param\ row\ The\ row\ number\ of\ the\ button\r\n\ @param\ col\ The\ column\ number\ of\ the\ button\r\n\r\n\ @return\ A\ JButton\ configured\ corresponding\ to\ the\ row\ and\ column\r\n
numComments=29
